name: Build Deploy
description: Action for building and deploying

inputs:
  environment:
    description: staging or prod
    required: true
  force_build:
    description: Force a build
    required: false
  secret_github_token:
    description: Github token
    required: true
  secret_gh_token:
    description: GH token
    required: true
  secret_algolia_admin_key:
    description: Algolia admin key
    required: true
  secret_gatsby_algolia_app_id:
    description: Algolia app id
    required: true
  secret_gatsby_algolia_search_key:
    description: Algolia search key
    required: true
  secret_launchdarkly_client_side_id:
    description: Launchdarkly client side id
    required: true
  secret_gatsby_datadog_client_token:
    description: Datadog client token
    required: false
  secret_gatsby_datadog_rum_application_id:
    description: Datadog rum application id
    required: true
  secret_datadog_rum_client_token:
    description: Datadog rum client token
    required: true
  secret_track_js_token:
    description: Track js token
    required: true
  secret_docs_deploybot_webhook_url:
    description: Deploybot webhook url
    required: true
  aws_role_arn:
    description: AWS role arn used for fetching from SSM and deploying to S3
    required: true
  bucket_prefix:
    description: Bucket prefix used for staging deployments
    required: false
  
runs:
  using: composite
  steps:
    - name: Set BUCKET_PREFIX ENV
      run: echo "BUCKET_PREFIX=${{ inputs.bucket_prefix }}" >> $GITHUB_ENV
    - name: Fetch git history
      uses: actions/checkout@v3
      with:
      # fetch entire history to get last edit date for topics
        fetch-depth: 0
    - name: Get github sha
      shell: bash
      if: ${{ inputs.environment }} == 'staging'
      run: |
          echo "REF NAME: ${{ github.ref_name }}"
          echo "SHA ${{ github.sha }}"
    - name: Find last successful run
      if: ${{ inputs.force_build != 'true' }}
      uses: SamhammerAG/last-successful-build-action@v4
      id: last-success
      with:
        token: ${{ inputs.secret_github_token }}
        branch: main
        workflow: Deploy to ${{ inputs.environment == 'staging' && 'Staging' || 'Production' }}
    - name: Get specific changed files
    # default output of last success is current SHA,
    # so we should skip in that case
    # if we can't find a last success, we should run deploy
      if: steps.last-success.outputs.sha != github.sha && ${{ inputs.force_build != 'true' }}
      id: changed-files-specific
      uses: tj-actions/changed-files@v36
      with:
        token: ${{ inputs.environment == 'staging' && null || github.token }}
        base_sha: ${{ steps.last-success.outputs.base_sha }}
        sha: ${{ github.sha }}
        separator: ' '
      # fetch_depth increased to 120 as an attempt to resolve sc-176350
        fetch_depth: ${{ inputs.environment == 'staging' && '120' || null }}
        files: |
          assets
          src
          ${{ inputs.environment == 'staging' && '.github/workflows/deployStaging.yml' || '.github/workflows/deployProd.yml' }}
          package.json
          yarn.lock
          *.ts
          *.js
        files_ignore: |
          cypress
          .eslintrc.js
          jest.config.js
          jest.setup.js
    - name: Should deploy?
      shell: bash
      if: ${{ inputs.force_build != 'true' }}
      id: build-status
      run: |
        echo "::debug::any changed: ${{ steps.changed-files-specific.outputs.any_changed }}"
        echo "::debug::only changed: ${{ steps.changed-files-specific.outputs.only_changed }}"
        echo "::debug::any modified: ${{ steps.changed-files-specific.outputs.any_modified }}"
        echo "::set-output name=deploy::${{ toJSON(steps.changed-files-specific.outputs) == '{}' || steps.changed-files-specific.outputs.any_modified == 'true' }}"
    - name: Setup node
      if: ${{ inputs.force_build == 'true' }} || steps.build-status.outputs.deploy == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get LD SDK Key
      uses: ./.github/workflows/ssm-secrets
      with:
        aws_assume_role: ${{ inputs.aws_role_arn }}
        ssm_parameter_pairs: ${{ inputs.environment == 'staging' && '/staging/common/services/docs/ld_sdk_key = LAUNCHDARKLY_SDK_KEY' || '/production/common/services/docs/ld_sdk_key = LAUNCHDARKLY_SDK_KEY' }}
    - name: Configure AWS
      if: ${{ inputs.force_build == 'true' }} || steps.build-status.outputs.deploy == 'true'
      uses: aws-actions/configure-aws-credentials@v2
      with:
        audience: https://github.com/launchdarkly
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: us-east-1
    - name: Caching Gatsby
    # -eap builds are customer facing so we can't take any chances with build cache issues
    # sc-176925
      if: ${{ inputs.environment == 'staging' }} && steps.build-status.outputs.deploy == 'true' && !(endsWith(github.ref_name, '-eap'))
      id: gatsby-cache-build
      uses: actions/cache@v3
      with:
        path: |
          public
          .cache
        key: ${{ runner.os }}-gatsby-build-${{ inputs.bucket_prefix }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-gatsby-build-${{ inputs.bucket_prefix }}-${{ hashFiles('**/yarn.lock') }}
    - name: Yarn install
      shell: bash
      if: ${{ inputs.force_build == 'true' }} || steps.build-status.outputs.deploy == 'true'
      run: CYPRESS_INSTALL_BINARY=0 PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn install --immutable
    - name: Build and deploy
      shell: bash
      if: ${{ inputs.force_build == 'true' }} || steps.build-status.outputs.deploy == 'true'
      run: ${{ inputs.environment == 'staging' && 'yarn build-deploy-staging' || 'yarn build-deploy-prod' }}
      env:
        GH_TOKEN: ${{ inputs.secret_gh_token }}
        ALGOLIA_ADMIN_KEY: ${{ inputs.secret_algolia_admin_key }}
        GATSBY_ALGOLIA_APP_ID: ${{ inputs.secret_gatsby_algolia_app_id }}
        GATSBY_ALGOLIA_SEARCH_KEY: ${{ inputs.secret_gatsby_algolia_search_key }}
        GATSBY_ALGOLIA_INDEX: 'Docs'
        LAUNCHDARKLY_CLIENT_SIDE_ID: ${{ inputs.secret_launchdarkly_client_side_id }}
        LAUNCHDARKLY_SDK_KEY: ${{ env.LAUNCHDARKLY_SDK_KEY }}
        GATSBY_DATADOG_CLIENT_TOKEN: ${{ inputs.environment == 'staging' && inputs.secret_gatsby_datadog_client_token }}
        GATSBY_DATADOG_RUM_APPLICATION_ID: ${{ inputs.secret_gatsby_datadog_rum_application_id }}
        GATSBY_DATADOG_RUM_CLIENT_TOKEN: ${{ inputs.secret_datadog_rum_client_token }}
        GATSBY_TRACKJS_TOKEN: ${{ inputs.secret_track_js_token }}
        SEGMENT_KEY: ${{ inputs.environment == 'staging' && '' || 'RUtph5AIOikMUv9vQUVqHrb6G2pALs0T' }}
        AWS_S3_BUCKET: ${{ inputs.environment == 'staging' && 'launchdarkly-docs-staging' || 'launchdarkly-docs-production' }}
        AWS_HOSTNAME: ${{ inputs.environment == 'staging' && 'docs-stg.launchdarkly.com' || 'docs.launchdarkly.com'}}
        CI: ${{ inputs.environment == 'staging' }}
    - name: Notify slack
      if: ${{ inputs.environment == 'prod' }} && failure()
      uses: slackapi/slack-github-action@v1
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.secret_docs_deploybot_webhook_url }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      with:
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":rotating_light::rotating_light::rotating_light::rocket: Docs site failed to deploy to *<https://docs.launchdarkly.com|Production>*. :rotating_light::rotating_light::rotating_light:"
                },
                "accessory": {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View failed run"
                  },
                  "action_id": "view-action-${{github.run_id}}",
                  "url": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "plain_text",
                    "text": ":github: Deploy triggered by ${{github.actor}}",
                    "emoji": true
                  }
                ]
              }
            ]
          }
